<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>MultiPageExport</web>
<name>Groovy</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>MultiPageExport.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1237982182000</creationDate>
<date>1255885549000</date>
<contentUpdateDate>1255885549000</contentUpdateDate>
<version>1.1</version>
<title>Groovy</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>checkbox</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>MultiPageExport.Groovy</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>8320f787-1655-4363-9091-e423c1bf708c</guid>
<property>
<tags/>
</property>
</object>
<content>/* Document Transclusion Provider #* */

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.velocity.VelocityContext;
import org.xwiki.rendering.block.IdBlock;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.HeaderBlock;
import org.xwiki.rendering.block.ImageBlock;
import org.xwiki.rendering.block.LinkBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.listener.DefaultAttachement;
import org.xwiki.rendering.listener.DocumentImage;
import org.xwiki.rendering.listener.Image;
import org.xwiki.rendering.listener.ImageType;
import org.xwiki.rendering.listener.Link;
import org.xwiki.rendering.listener.LinkType;
import org.xwiki.rendering.listener.Listener;
import org.xwiki.rendering.parser.Syntax;
import org.xwiki.rendering.parser.SyntaxType;
import org.xwiki.rendering.renderer.PrintRendererFactory;
import org.xwiki.rendering.renderer.printer.DefaultWikiPrinter;
import org.xwiki.rendering.renderer.printer.WikiPrinter;
import org.xwiki.rendering.util.ParserUtils;

import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.api.Context;
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.api.XWiki;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.classes.ListItem;
import com.xpn.xwiki.pdf.impl.PdfExportImpl;
import com.xpn.xwiki.web.Utils;
import com.xpn.xwiki.util.Util;
import com.xpn.xwiki.web.XWikiURLFactory;

public class DocumentTransclusionProvider
{
    /**
     * XWiki API object
     */
    private XWiki xwiki;

    /**
     * XWiki context object
     */
    private Context context;

    /**
     * Debug info
     */
    private String debug = "";

    /**
     * Parser Utils
     */
    private ParserUtils parserUtils = new ParserUtils();

    /**
     * Set xwiki and context
     */
    public void setContext(Context context, XWiki xwiki)
    {
        this.context = context;
        this.xwiki = xwiki;
    }

    public void addDebug(String str)
    {
        this.debug += str + "\n";
    }

    public String getDebug()
    {
        return this.debug;
    }

    public List listBackupFiles(String backupDir) {
      def backupDirFile = new File(backupDir);
      return backupDirFile.listFiles();
    }

    public List downloadFile(String backupDir, String filename) {
      def context2 = context.context;
      def packageFile = new File(backupDir, filename);
      context2.getResponse().setContentType("application/zip");
      context2.getResponse().addHeader("Content-disposition", "inline; filename=" + filename);
      context2.getResponse().getOutputStream().write(Util.getFileContentAsBytes(packageFile));    
    }

    public boolean backupToDisk(String backupDir, String packageName, List selectList, boolean withVersions) {
      def context2 = context.context;
      def backupDirFile = new File(backupDir);
      backupDirFile.mkdirs();
      def packageFile = new File(backupDir, packageName);
      def fileos = new FileOutputStream(packageFile);

      // access the protected plugin
      def export = xwiki.package.package;
      if (withVersions)
       export.setWithVersions(true)
      else
       export.setWithVersions(false)
      export.setAuthorName("");
      export.setLicence("");     
      export.setVersion("");
      export.setName(packageName);

      for (page in selectList) {
          export.add(page, 0, context2)
      }
      export.export(fileos, context2);
      if (packageFile.length()==0)
       return false;
      else
       return true;
    }

    public void exportToXAR(String packageName, List selectList, boolean withVersions) {
      def export = xwiki.package
      if (withVersions)
       export.setWithVersions(true)
      else
       export.setWithVersions(false)
      export.setAuthorName("");
      export.setLicence("");     
      export.setVersion("");
      export.setName(packageName);

      for (page in selectList) {
          export.add(page, 0)
      }
      export.export();
    }

    /**
     * Returns a pdf of a transcluded view of the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return the transcluded result in xhtml syntax.
     * @throws Exception
     */
    public void transcludeToPDForRTF(String documentName, String type) throws Exception
    {
        transcludeToPDForRTF(documentName, documentName, null, type);
    }

    /**
     * Returns a pdf of a transcluded view of the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return the transcluded result in xhtml syntax.
     * @throws Exception
     */
    public void transcludeToPDForRTF(String documentName, List&lt;String&gt; selectlist, String type) throws Exception
    {
        transcludeToPDForRTF(documentName, documentName, selectlist, type);
    }

    /**
     * Returns a pdf of a transcluded view of the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return the transcluded result in xhtml syntax.
     * @throws Exception
     */
    public void transcludeToPDForRTF(String packageName, String documentName, List&lt;String&gt; selectlist, String type) throws Exception
    {
        Document doc = (documentName == null || documentName.equals("")) ? null : xwiki.getDocument(documentName);
        transcludeToPDForRTF(packageName, (Document) doc, selectlist, type);
    }

    /**
     * Returns a pdf of the transcluded view of the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return the transcluded result in xhtml syntax.
     * @throws Exception
     */
    public void transcludeToPDForRTF(String packageName, Document doc, List&lt;String&gt; selectlist, String type) throws Exception
    {
        XWikiContext context2 = context.getContext();
        // Preparing the PDF Exporter and PDF URL Factory (this last one is
        // necessary for images includes)
        PdfExportImpl pdfexport = new PdfExportImpl();
        XWikiURLFactory urlf =
            context2.getWiki().getURLFactoryService().createURLFactory(XWikiContext.MODE_PDF, context2);
        context2.setURLFactory(urlf);
        // Preparing the PDF http headers to have the browser recognize the file
        // as PDF
        context2.getResponse().setContentType("application/" + type);
        if (doc == null)
            context2.getResponse().addHeader("Content-disposition", "inline; filename=" + packageName + "." + type);
        else
            context2.getResponse().addHeader(
                "Content-disposition",
                "inline; filename=" + Utils.encode(doc.getSpace(), context2) + "_"
                    + Utils.encode(doc.getName(), context2) + "." + type);
        // Preparing temporary directories for the PDF URL Factory
        File dir = context2.getWiki().getTempDirectory(context2);
        File tempdir = new File(dir, RandomStringUtils.randomAlphanumeric(8));
        // We should call this but we cannot do it. It might not be a problem
        // but if we have an encoding issue we should look into it
        // this.tidy.setOutputEncoding(context2.getWiki().getEncoding());
        // this.tidy.setInputEncoding(context2.getWiki().getEncoding());
        try {
            // we need to prepare the pdf export directory before running the
            // transclusion
            tempdir.mkdirs();
            context2.put("pdfexportdir", tempdir);
            // running the transclusion and the final rendering to HTML
            String content = transclude(doc, selectlist);
            // preparing velocity context for the adding of the headers and
            // footers
            VelocityContext vcontext = (VelocityContext) context2.get("vcontext");
            vcontext.put("content", content);
            vcontext.put("doc", doc);
            vcontext.put("cdoc", doc);
            vcontext.put("tdoc", doc);
            // pdfmulti.vm is declared in the EMC skin
            String tcontent = xwiki.parseTemplate("pdfmulti.vm");
            // launching the export
            pdfexport.exportHtml(tcontent, context.getResponse().getOutputStream(), (type == "rtf") ? PdfExportImpl.RTF
                : PdfExportImpl.PDF, context2);
        } finally {
            // cleaning temporary directories
            File[] filelist = tempdir.listFiles();
            for (int i = 0; i &lt; filelist.length; i++) {
                filelist[i].delete();
            }
            tempdir.delete();
        }
    }

    /**
     * Returns a transcluded view of the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return the transcluded result in xhtml syntax.
     * @throws Exception
     */
    public String transclude(String documentName) throws Exception
    {
        return transclude(documentName, null);
    }

    /**
     * Returns a transcluded view of the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return the transcluded result in xhtml syntax.
     * @throws Exception
     */
    public String transclude(String documentName, List&lt;String&gt; selectlist) throws Exception
    {
        Document doc = (documentName == null || documentName.equals("")) ? null : xwiki.getDocument(documentName);
        return transclude((Document) doc, selectlist);
    }

    /**
     * Returns a transcluded view of the given xwiki 2.0 document.
     * 
     * @param doc document, should be a xwiki 2.0 document.
     * @return the transcluded result in xhtml syntax.
     * @throws Exception
     */
    public String transclude(Document doc, List&lt;String&gt; selectlist) throws Exception
    {
        List&lt;String&gt; includedList = new ArrayList&lt;String&gt;();
        List&lt;String&gt; headerIds  = new ArrayList&lt;String&gt;();
        addDebug("Start transclude with: " + doc);
        // if we don't have a main document
        // then we use the first document in the select list as the main one
        if (doc == null) {
            addDebug("No main document passed");
            if ((selectlist == null) || (selectlist.size() &lt; 1))
                return "";
            String childDocName = selectlist.get(0);
            if (childDocName.equals("")) {
                if (selectlist.size() &lt; 2)
                    return "";
                else
                    childDocName = selectlist.get(1);
            }
            addDebug("New main document is: " + childDocName);
            doc = xwiki.getDocument(childDocName);
        }
        XDOM rootXdom = (doc == null || doc.getDocument() == null) ? null : doc.getDocument().getXDOM();
        rootXdom = (rootXdom == null) ? null : rootXdom.clone();
        if (rootXdom == null)
            return "could not read the main document";
        // add main document to included list
        includedList.add(doc.getFullName());
        // Recursively transclude the root xdom
        transclude(doc, rootXdom, selectlist, includedList, headerIds);
        // Render the result.
        // we are given a select list so we should append them in order
        // transclude has already modified the link to make them point to
        // anchors inside the document
        if (selectlist != null) {
            for (String childDocumentName : selectlist) {
                appendChild(childDocumentName.toString(), rootXdom, selectlist, includedList, headerIds);
            }
        }
        WikiPrinter printer = new DefaultWikiPrinter();
        PrintRendererFactory rendererFactory = (PrintRendererFactory) Utils.getComponent(PrintRendererFactory.ROLE);
        // Here I'm using the XHTML renderer, other renderers can be used simply
        // by changing the syntax argument.
        Listener listener = rendererFactory.createRenderer(new Syntax(SyntaxType.XHTML, "1.0"), printer);
        rootXdom.traverse(listener);
        // Done.
        return printer.toString();
    }

    /**
     * Recursively transcludes the given xdom.
     * 
     * @param xdom
     * @throws Exception
     */
    public void transclude(Document doc, XDOM xdom, List&lt;String&gt; selectlist, List&lt;String&gt; includedList, List&lt;String&gt; headerIds)
        throws Exception
    {
        List&lt;String&gt; list = updateXDOM(doc, xdom, selectlist, headerIds);
        for (String childDocumentName : list) {
            appendChild(childDocumentName.toString(), xdom, selectlist, includedList, headerIds);
        }
    }

    /**
     * Add a child document to the given XDOM
     * 
     * @param childDocumentName document to append to the xdom
     * @param xdom XDOM to append to
     * @param selectlist list of documents that are included in the multi page export
     * @param includedList list of documents already appended
     * @throws Exception
     */
    public void appendChild(String childDocumentName, XDOM xdom, List&lt;String&gt; selectlist, List&lt;String&gt; includedList, List&lt;String&gt; headerIds)
        throws Exception
    {
        // make sure we don't include twice
        if (childDocumentName == "" || includedList.contains(childDocumentName))
            return;
        includedList.add(childDocumentName);
        Document childDoc = xwiki.getDocument(childDocumentName);
        XDOM childXdom = (childDoc == null || childDoc.getDocument() == null) ? null : childDoc.getDocument().getXDOM();
        childXdom = (childXdom == null) ? null : childXdom.clone();

        // Transclude (recursive call) the child xdom.
        if (childXdom != null)
            transclude(childDoc, childXdom, selectlist, includedList, headerIds);

        // Now, before we insert the childXdom into current (parent) xdom, we
        // must place an anchor so that we can link to the child's content later.

        IdBlock idBlock = new IdBlock("child_" + childDocumentName.hashCode());
        xdom.addChild(idBlock);

        // Now append the childXdom
        if (childXdom != null)
            xdom.addChildren(childXdom.getChildren());
            // xdom.addChild(childXdom);
    }

    /**
     * Update the links in the given xdom.
     * 
     * @param doc Document that we are handling the content of
     * @param xdom XDOM to update the links and images
     * @param selectlist List of documents that are included in the multi page export. If null then we will include all
     *            childrens
     * @return list of documents that have been found as links in case selectlist is null
     * @throws Exception
     */
    public List&lt;String&gt; updateXDOM(Document doc, XDOM xdom, List&lt;String&gt; selectlist, List&lt;String&gt; headerIds)
        throws Exception
    {
        List&lt;String&gt; list = new ArrayList&lt;String&gt;();
        // Find all the image blocks inside this XDOM to make sure we have
        // absolute image links
        // This is necessary as the XDOM will be included in a different
        // document
        List&lt;ImageBlock&gt; imageBlocks = xdom.getChildrenByType(ImageBlock.class, true);
        // Process each image block
        for (ImageBlock imageBlock : imageBlocks) {
            // We are only interested in images that are attachments to the
            // current document
            if ((imageBlock.getImage().getType() == ImageType.DOCUMENT)
                &amp;&amp; (null != doc.getAttachment(imageBlock.getImage().getName()))) {
                // new image block with an absolute link
                Image newImageBlockImage =
                    new DocumentImage(new DefaultAttachement(doc.getFullName(), imageBlock.getImage().getName()));
                ImageBlock newImageBlock =
                    new ImageBlock(newImageBlockImage, imageBlock.isFreeStandingURI(), imageBlock.getParameters());
                // Replace the original link
                imageBlock.getParent().insertChildBefore(newImageBlock, imageBlock);

                imageBlock.getParent().getChildren().remove(imageBlock);
                addDebug("Image in doc: " + imageBlock.getImage());
            }
        }
        // Resolve duplicate anchors
        List&lt;HeaderBlock&gt; headerBlocks = xdom.getChildrenByType(HeaderBlock.class, true);
        for (HeaderBlock hBlock : headerBlocks) {
            // Check if this header id has occured before.
            String oldId = hBlock.getId();            
            if (headerIds.contains(oldId)) {
                // Now we need to replace this header block with a new one (with a new id).
                String newId = oldId;
                int localIndex = 0;
                while (headerIds.contains(newId)) {
                    newId = oldId + (++localIndex);
                }
                // Create a new HeaderBlock
                HeaderBlock newhBlock = new HeaderBlock(hBlock.getChildren(), hBlock.getLevel(), hBlock.getParameters(), newId);
                // Replace the old one.
                List&lt;Block&gt; replacement = new ArrayList&lt;Block&gt;();
                replacement.add(newhBlock);
                hBlock.replace(replacement);
                // Finally, add the newId into the headerIds list.
                headerIds.add(newId);
            } else {
                headerIds.add(oldId);
            }
        }
        // Find all the link blocks inside this XDOM
        List&lt;LinkBlock&gt; linkBlocks = xdom.getChildrenByType(LinkBlock.class, true);
        // Process each link block
        for (LinkBlock linkBlock : linkBlocks) {
            // We are only interested in links to other pages.
            if (linkBlock.getLink().getType() == LinkType.DOCUMENT) {
                String childDocumentName = linkBlock.getLink().getReference();
                if (childDocumentName != null) {
                    // Create the child xdom
                    addDebug("Found one link to: " + childDocumentName);
                    if (childDocumentName.indexOf(".") == -1) {
                        childDocumentName = doc.getSpace() + "." + childDocumentName;
                        addDebug("Modified link to: " + childDocumentName);
                    }

                    if (selectlist == null) {
                        list.add(childDocumentName);
                    }

                    if ((selectlist == null) || selectlist.contains(childDocumentName)) {
                        // Now we need to recreate the link (which was pointing
                        // to child document) into this anchor (id macro)
                        // We create a new link and replace the original one.
                        Link newLinkBlockLink = new Link();
                        newLinkBlockLink.setType(LinkType.DOCUMENT);
                        newLinkBlockLink.setAnchor("child_" + childDocumentName.hashCode());
                        LinkBlock newLinkBlock = new LinkBlock(linkBlock.getChildren(), newLinkBlockLink, false);
                        // if there was no children we need to create a Label
                        if (linkBlock.getChildren().isEmpty()) {
                            newLinkBlock.addChildren(parserUtils.parsePlainText(linkBlock.getLink().getReference()));
                        }

                        // Replace the original link
                        linkBlock.getParent().insertChildBefore(newLinkBlock, linkBlock);
                        linkBlock.getParent().getChildren().remove(linkBlock);
                    } // if in selectlist or selectlist is null
                } // if childDocumentName
            } // if LinkType.Documen
        } // for linkBlocks
        return list;
    }

    /**
     * Returns the list of linked docs in the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return th list of linked docs
     * @throws Exception
     */
    public List&lt;String&gt; getLinks(String documentName) throws Exception
    {
        Document doc = xwiki.getDocument(documentName);
        XDOM rootXdom = (doc == null || doc.getDocument() == null) ? null : doc.getDocument().getXDOM();
        rootXdom = (rootXdom == null) ? null : rootXdom.clone();
        if (rootXdom == null)
            return null;// "could not read the main document";
        // get the links
        return getLinks(doc, rootXdom);
    }

    /**
     * Get links for the given xdom
     * 
     * @param doc parent doc
     * @param xdom xdom to find links in
     * @throws Exception
     */
    public List&lt;String&gt; getLinks(Document doc, XDOM xdom) throws Exception
    {
        List&lt;String&gt; linkList = new ArrayList&lt;String&gt;();
        // Find all the link blocks inside this XDOM
        List&lt;LinkBlock&gt; linkBlocks = xdom.getChildrenByType(LinkBlock.class, true);
        // Process each link block
        for (LinkBlock linkBlock : linkBlocks) {
            // We are only interested in links to other pages.
            if (linkBlock.getLink().getType() == LinkType.DOCUMENT) {
                String childDocumentName = linkBlock.getLink().getReference();
                if (childDocumentName != null) {
                    // Create the child xdom
                    if (childDocumentName!="") {
                     if (childDocumentName.indexOf(".") == -1)
                        childDocumentName = doc.getSpace() + "." + childDocumentName;
                     addDebug("Found one link to: " + childDocumentName);
                     linkList.add(childDocumentName);
                    }
                }
            }
        }
        return linkList;
    }

    /**
     * Returns the recursive list of linked docs in the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return th list of linked docs
     * @throws Exception
     */

    public List&lt;ListItem&gt; getLinksTreeList(String documentName) throws Exception
    {
        List&lt;ListItem&gt; treeList = new ArrayList&lt;ListItem&gt;();
        List&lt;String&gt; safeList = new ArrayList&lt;String&gt;();
        safeList.add(documentName);
        treeList.add(new ListItem(documentName, xwiki.getDocument(documentName).getDisplayTitle(), ""));
        getLinksTreeList(documentName, treeList, safeList);
        return treeList;
    }

    /**
     * Returns the recursive list of linked docs in the given xwiki 2.0 document.
     * 
     * @param documentName name of the input document, should be a xwiki 2.0 document.
     * @return th list of linked docs
     * @throws Exception
     */
    public void getLinksTreeList(String documentName, List&lt;ListItem&gt; treeList, List&lt;String&gt; safeList) throws Exception
    {
        for (String link : getLinks(documentName)) {
            if (!safeList.contains(link)) {
                safeList.add(link);
                treeList.add(new ListItem(link.toString(), xwiki.getDocument(link.toString()).getDisplayTitle(), documentName));
                getLinksTreeList(link.toString(), treeList, safeList);
            }
        }
    }

    public List&lt;String&gt; split(String str, String splitstr)
    {
        return Arrays.asList(StringUtils.split(str, splitstr));
    }

    public String escapeForJS(String origtext)
    {
        String text = origtext.replaceAll("\\\\", "\\\\");
        text = text.replaceAll("'", "\\\\'");
        text = text.replaceAll("\"", "\\\\x22");
        return text;
    }

    public String escapeForXML(String origtext)
    {
        String text = origtext;
        text = text.replaceAll("&lt;", "&amp;lt;");
        text = text.replaceAll("&gt;", "&amp;gt;");
        text = text.replaceAll("&amp;", "&amp;amp;");
        text = text.replaceAll("'", "&amp;apos;");
        text = text.replaceAll("\"", "&amp;quote;");
        return text;
    }

    public List&lt;String&gt; getLinkedPages(Document doc)
    {
        XWikiContext context2 = context.getContext();
        if (context2 == null)
            return new ArrayList&lt;String&gt;();
        XWikiDocument document = doc.getDocument();
        XWikiDocument olddocument = context2.getDoc();
        try {
            if (document == null)
                return new ArrayList&lt;String&gt;();
            else {
                context2.setDoc(document);
                return document.getLinkedPages(context2);
            }
        } finally {
            if (olddocument != null)
                context2.setDoc(olddocument);
        }
    }
}

/* *# */</content>
</xwikidoc>
